#!/usr/bin/env node

/**
 * Module dependencies.
 */

var logger = require('stream-log')(process.stderr);
var program = require('commander');
var join = require('path').join;
var archy = require('archy');
var cwd = process.cwd();
var fs = require('fs');

/**
 * Paths
 */

var mapping = join(process.cwd())

/**
 * Logger.
 */

logger.type('error', '31m', function(){
  logger.end();
  process.exit(1);
});

/**
 * Examples
 */

program.on('--help', function(){
  console.log('  Examples:');
  console.log();
  console.log('    # list all dependencies');
  console.log('    $ duo ls');
  console.log();
  console.log('    # list all dependencies < 8');
  console.log('    $ duo ls --depth 8');
  console.log();
  process.exit(0);
});

/**
 * Program
 */

program
  .usage('duo ls')
  .option('-d, --depth <depth>', 'ls depth, defaults to Infinity', Infinity)
  .parse(process.argv);

/**
 * Map
 */

try {
  var map = JSON.parse(read(join(cwd, 'components', 'duo.json')));
} catch (e) {
  logger.error(e.stack || e);
}

/**
 * Component
 */

try {
  var component = JSON.parse(read(join(cwd, 'component.json')));
} catch (e) {
  logger.error(e.stack || e);
}

/**
 * Max depth
 */

var max = program.depth || Infinity;

/**
 * List
 */

var ls = list(map, 0, {
  label: pretty(component.name + '@' + (component.version || '')),
  name: Object.keys(map)[0],
  nodes: [],
});

/**
 * Print
 */

console.log();
console.log(archy(ls, '  '));
console.log();

/**
 * List using `map` and `depth`
 *
 * @param {Object} map
 * @param {Number} depth
 * @param {Object} node
 * @return {Array}
 * @api private
 */

function list(map, depth, node){
  var deps = values(map[node.name].deps);

  deps.forEach(function(dep){
    if (depth == max) return;
    var label = pretty(dep);
    var child = { nodes: [], label: label, name: dep };
    var a = dep.split('@')[0];
    var b = node.name.split('@')[0];

    // don't list files of components
    // but get their dependencies.
    if (a == b) {
      var realname = node.name;
      node.name = dep;
      list(map, depth, node);
      node.name = realname;
      return;
    }

    // LAME: add if not added
    if (!has(node.nodes, child)) {
      node.nodes.push(child);
      list(map, depth + 1, child);
    }
  });

  return node;
}

/**
 * Object values.
 */

function values(obj){
  var ret = [];
  for (var k in obj) ret.push(obj[k]);
  return ret;
}

/**
 * Read
 *
 * @param {String} path
 */

function read(path) {
  return fs.readFileSync(path, 'utf8');
}

/**
 * Color the given `dep`
 */

function pretty(dep){
  var name = dep.split('@')[0];
  var version = dep.split('@')[1];

  if (version) version = version.split('/')[0];
  if (~name.indexOf('/')) name = name.split('/')[1];

  return '\033[36m'
    + name
    + '\033[m'
    + ' \033[90m'
    + (version || '')
    + '\033[m';
}

/**
 * Check if `nodes` has `node`.
 *
 * @param {Array} nodes
 * @param {Object} node
 */

function has(nodes, node){
  for (var i = 0; i < nodes.length; ++i) {
    if (nodes[i].name == node.name) return true;
  }
}
