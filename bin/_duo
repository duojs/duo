#!/usr/bin/env node

/**
 * Module dependencies.
 */

var detect = require('language-classifier');
var Command = require('commander').Command;
var relative = require('path').relative;
var exists = require('fs').existsSync;
var resolve = require('path').resolve;
var dirname = require('path').dirname;
var extname = require('path').extname;
var mkdirp = require('mkdirp').sync;
var Logger = require('stream-log');
var stat = require('fs').statSync;
var stdin = require('get-stdin');
var Watch = require('duo-watch');
var join = require('path').join;
var spawn = require('win-fork');
var pkg = require('../package');
var glob = require('glob').sync;
var Batch = require('batch');
var stdout = process.stdout;
var cwd = process.cwd();

/**
 * Logger.
 */

var logger = new Logger(process.stderr)
  .type('building', '36m')
  .type('built', '36m')
  .type('installing', '36m')
  .type('installed', '36m')
  .type('finding', '36m')
  .type('found', '36m')
  .type('using', '36m');

/**
 * Error.
 */

logger.type('error', '31m', function () {
  logger.end();
  process.exit(1);
});

/**
 * Program.
 */

var program = new Command('duo')
  .version(pkg.version)
  .usage('[options] command|[file, ...] [out]')
  .option('-c, --copy', 'opt to copy files instead of symlink', false)
  .option('-C, --no-cache', 'enable or disable the cache during build', true)
  .option('-d, --development', 'include development dependencies.', false)
  .option('-g, --global <name>', 'expose entry as a global <name>', null)
  .option('-o, --output <dir>', 'set the output directory, defaulted to build/', null)
  .option('-q, --quiet', 'only print to stderr when there is an error', false)
  .option('-r, --root <dir>', 'root directory to build from.', null)
  .option('-t, --type <type>', 'set the entry type', null)
  .option('-u, --use <plugin>', 'use transform plugin(s)', collect, [])
  .option('-v, --verbose', 'show as much logs as possible', false)
  .option('-w, --watch', 'watch for changes and rebuild', false)
  .option('-s, --standalone <standalone>', 'outputs standalone javascript umd <standalone>', '')
  .option('--with_require <module>', 'define require("<module>") for HTML', '')
  .option('-S, --stdout', 'outputs build to stdout', false)
  .parse(process.argv);

/**
 * Help.
 */

program.on('--help', function () {
  console.log('  Usage:');
  console.log();
  console.log('  # build all files to build/');
  console.log('  $ duo *.{js,css}');
  console.log();
  console.log('  # build all files to the out/ folder');
  console.log('  $ duo --output out/ *.{js,css}');
  console.log();
  console.log('  # build from stdin and output out.css');
  console.log('  $ duo < in.css > out.css');
  console.log();
  console.log('  # build to out.js using stdout');
  console.log('  $ duo --stdout in.js > out.js');
  console.log();
  console.log('  # build using a plugin');
  console.log('  $ npm install duo-whitespace');
  console.log('  $ duo --use duo-whitespace in.styl > out.css');
  console.log();
  console.log('  Commands:');
  console.log();
  console.log('    ls           list all dependencies.');
  console.log('    duplicates   show all duplicates.');
  console.log();
  process.exit(0);
});



/**
 * Language mapping.
 */

var langmap = {
  javascript: 'js',
  css: 'css'
};

/**
 * Command.
 */

var command = program.args[0];

/**
 * $PATH.
 */

var paths = [__dirname].concat(process.env.PATH.split(':'));

/**
 * Bin.
 */

var bin = ['duo', command].join('-');

/**
 * Quiet flag.
 */

var quiet = program.quiet;

/**
 * Root.
 */

var root = findroot(program.root);

/**
 * Asset path.
 */

var outdir = program.output;

/**
 * Watching.
 */

var watching = false;

/**
 * Plugins.
 */

var plugins = use(program.use);

/**
 * Stdout.
 */

if (program.stdout && program.args.length > 1) {
  logger.error('cannot use stdout with multiple entries');
  return;
}

/**
 * Use a custom executable when there is at least 1 argument (ie: "command")
 * that does not appear to have a file extension and does not correspond to
 * something in the filesystem.
 */

if (command && !extname(command) && !exists(command)) {
  var args = process.argv.slice(3);

  // find executable
  var exec = paths.reduce(function (binary, path) {
    path = resolve(path, bin);
    return exists(path) && stat(path)
      ? path
      : binary;
  }, bin);

  // does not exist
  if (!exists(exec)) {
    logger.error(bin + '(1) does not exist');
    return;
  }

  // spawn
  args.unshift(exec);

  // proxy subcommands through gnode(1)
  var gnode = require.resolve('gnode');
  var bin = join(dirname(gnode), 'bin', 'gnode');
  args.unshift(bin);

  var proc = spawn('node', args, { stdio: 'inherit', customFds: [0, 1, 2] });
  proc.on('close', process.exit.bind(process));

  return;
}

/**
 * Actions.
 */

if (program.stdout && command) print(command);
else if (program.args.length) write(entries(program.args));
else if (!process.stdin.isTTY) input();
else program.help();

/**
 * Accept standard input.
 */

function input() {
  stdin(function (src) {
    var type = program.type || langmap[detect(src)];
    if (!type) logger.error('could not detect the file type');
    var duo = create(root).entry(src, type);

    duo.run(function (err, str) {
      if (err) throw error(err);
      logger.end();
      stdout.write(str);
      process.exit(0);
    });
  });
}

/**
 * Print to stdout.
 *
 * @param {String} entry
 */

function print(entry) {
  create(entry).run(function (err, src) {
    if (err) return error(err);
    logger.end();
    if (src) stdout.write(src);

    // watch or exit
    program.watch
      ? watch(print)
      : process.exit(0);
  });
}

/**
 * Write the entries.
 *
 * @param {Array} entries
 */

function write(entries) {
  if ('string' == typeof entries) entries = [entries];

  var batch = new Batch;
  var push = batch.push.bind(batch);

  var duos = entries
    .map(multiple)
    .map(push);

  batch.end(function (err) {
    if (err) return error(err);
    logger.end();

    // watch or exit
    program.watch
      ? watch(write)
      : process.exit(0);
  });

  // write multiple entries to
  // the directory `out`
  function multiple(entry) {
    return function (done) {
      create(entry).write(done);
    }
  }
}

/**
 * Create a duo instance.
 *
 * @param {entry} entry
 * @return {Duo}
 */

function create(entry) {
  var duo = Duo(root)
    .entry(resolve(program.root || cwd, entry))
    .development(!! program.development)
    .copy(program.copy)
    .cache(program.cache);

  // standalone
  var standalone = program.standalone;
  standalone && duo.standalone(standalone);

  // with_require
  var with_require = program.with_require;
  with_require && duo.with_require(with_require);

  // global
  program.global && duo.global(program.global);

  // verbose
  if (program.verbose) {
    duo.on('resolving', log('finding'));
    duo.on('resolve', log('found'));
    duo.on('installing', log('installing'));
  }

  // events
  if (!quiet) {
    duo.on('plugin', log('using'));
    duo.on('install', log('installed'));
    duo.on('running', log('building'));
    duo.on('run', log('built'));
  }

  // output dir
  outdir && duo.buildTo(outdir);
  program.out && duo.buildTo(program.out);

  // use plugins
  plugins.forEach(duo.use, duo);

  return duo;
}

/**
 * Watch.
 *
 * @param {Function} action
 */

function watch(action) {
  if (watching) return;
  watching = true;
  Watch(root).watch(action);
}

/**
 * Log an event.
 *
 * @param {String} event
 * @return {Function}
 */

function log(event) {
  return function (pkg) {
    pkg = pkg.slug ? pkg.slug() : pkg;
    pkg = 'source.' + (program.type || 'js') == pkg ? 'from stdin' : pkg;
    logger[event](pkg);
  }
}

/**
 * Error.
 */

function error(err) {
  err = 'string' == typeof err ? new Error(err) : err;
  if (err instanceof SyntaxError && err.fileName) {
    var msg = err.message;
    var file = relative(process.cwd(), err.fileName);
    logger.error('Syntax error:', msg, 'in:', file);
  } else {
    logger.error(err.stack);
  }
}

/**
 * Find the root.
 *
 * @param {String} root
 * @param {String}
 */

function findroot(root) {
  if (root) return resolve(cwd, root);
  var sep = require('path').sep;
  var parts = cwd.split(sep);
  var path = cwd;

  while (!exists(join(path, 'component.json')) && parts.length > 1) {
    parts.pop();
    path = parts.join(sep);
  }

  return parts.length <= 1
    ? cwd
    : path;
}

/**
 * Filter out unexpanded globs.
 *
 * @param {String} entry
 * @return {Boolean}
 */

function globs(path) {
  return !/\*/.test(path);
}

/**
 * Simple hueristic to check if `path` is a directory.
 *
 * @param {String} path
 * @return {Boolean}
 */

function isDir(path) {
  try {
    return stat(path).isDirectory();
  } catch (e) {
    return false;
  }
}

/**
 * Gets a list of all files within a directory recursively (and synchronously)
 *
 * @param {String} path
 * @return {Array:String}
 */

function listFiles(path, pattern) {
  var opts = { cwd: root, nodir: true };
  return glob(pattern || '**/*', opts);
}

/**
 * Retrieve an array of plugins from `--use`.
 *
 * @param {Array:String} plugins
 * @return {Array:Function}
 */

function use(plugins) {
  return plugins.map(function (plugin) {
    try {
      var local = resolve(root, plugin);
      var npm = resolve(root, "node_modules", plugin);
      var cwd = resolve(process.cwd(), "node_modules", plugin);
      var mod;

      if (exists(local)) mod = require(local);
      else if (exists(local + '.js')) mod = require(local);
      else if (exists(npm)) mod = require(npm);
      else mod = require(cwd);

      return Array.isArray(mod) ? mod : mod();
    } catch (e) {
      error(e);
    }
  }, []);
}

/**
 * Helper to capture list of plugins from CLI
 */

function collect(val, memo) {
  val.split(',').forEach(function (val) {
    memo.push(val);
  });

  return memo;
}

/**
 * Normalize entries list.
 *
 *  - expand globs
 *  - expand directories into list of all nested files
 *
 * @param {Array:String}
 * @return {Array:String}
 */

function entries(list) {
  return list.filter(globs).reduce(function (memo, entry) {
    if (isDir(join(root, entry))) {
      return memo.concat(listFiles(entry));
    } else {
      return memo.concat(entry);
    }
  }, []);
}

/**
 * Lazy-load Duo
 */

function Duo() {
  var duo = require('..');
  return duo.apply(duo, arguments);
}
