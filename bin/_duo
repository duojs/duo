#!/usr/bin/env node

/**
 * Module dependencies.
 */

var Command = require('commander').Command;
var exists = require('fs').existsSync;
var stats = require('fs').statSync;
var resolve = require('path').resolve;
var dirname = require('path').dirname;
var mkdirp = require('mkdirp').sync;
var Logger = require('stream-log');
var stat = require('fs').statSync;
var stdin = require('get-stdin');
var Watch = require('duo-watch');
var join = require('path').join;
var spawn = require('win-fork');
var pkg = require('../package');
var Batch = require('batch');
var stdout = process.stdout;
var cwd = process.cwd();
var Duo = require('..');

/**
 * Logger
 */

var logger = new Logger(process.stderr)
  .type('building', '36m')
  .type('built', '36m')
  .type('installing', '36m')
  .type('installed', '36m')
  .type('finding', '36m')
  .type('found', '36m')
  .type('using', '36m');

/**
 * Error
 */

logger.type('error', '31m', function(){
  logger.end();
  process.exit(1);
});

/**
 * Program
 */

var program = new Command('duo')
  .version(pkg.version)
  .usage('[options] command|[file, ...] [out]')
  .option('-c, --copy', 'opt to copy files instead of symlink', false)
  .option('-d, --development', 'include development dependencies.', false)
  .option('-g, --global <name>', 'expose entry as a global <name>', null)
  .option('-o, --output <dir>', 'set the output directory, defaulted to build/', null)
  .option('-q, --quiet', 'only print to stderr when there is an error', false)
  .option('-r, --root <dir>', 'root directory to build from.', null)
  .option('-t, --type <type>', 'set the entry type', null)
  .option('-u, --use <plugin>', 'use transform plugin', null)
  .option('-v, --verbose', 'show as much logs as possible', false)
  .option('-w, --watch', 'watch for changes and rebuild', false)
  .parse(process.argv);

/**
 * Help
 */

program.on('--help', function(){
  console.log('  Usage:');
  console.log();
  console.log('  # build in.js to out.js');
  console.log('  $ duo in.js > out.js');
  console.log();
  console.log('  # build in.css to out.css');
  console.log('  $ duo in.css > out.css');
  console.log();
  console.log('  # build all files to duo.assets() (default: build/)');
  console.log('  $ duo *.{js,css}');
  console.log();
  console.log('  # build all files to the out/ folder');
  console.log('  $ duo *.{js,css} out');
  console.log();
  console.log('  # build from stdin and output out.css');
  console.log('  $ duo < in.css > out.css');
  console.log();
  console.log('  # build using a plugin');
  console.log('  $ npm install duo-whitespace');
  console.log('  $ duo --use duo-whitespace in.styl > out.css');
  console.log();
  console.log('  Commands:');
  console.log();
  console.log('    ls           list all dependencies.');
  console.log('    duplicates   show all duplicates.');
  console.log();
  process.exit(0);
});

/**
 * Command
 */

var command = program.args[0];

/**
 * $PATH
 */

var paths = [__dirname].concat(process.env.PATH.split(':'));

/**
 * Bin
 */

var bin = ['duo', command].join('-');

/**
 * Quiet flag.
 */

var quiet = program.quiet;

/**
 * Root
 */

var root = findroot(program.root);

/**
 * Asset path
 */

var outdir = assets(program.args);

/**
 * Watching
 */

var watching = false;

/**
 * Plugins
 */
var plugins = usePlugins(program.use);

/**
 * Custom executable
 */

if (command && !isFile(command)) {
  var args = process.argv.slice(3);

  // Need to fetch this list.
  var commands = ['ls', 'duplicates'];

  // find executable
  var exec = paths.reduce(function(binary, path){
    path = resolve(path, bin);
    return exists(path) && stat(path)
      ? path
      : binary;
  }, bin);
	
  // does not exist
  if (!exists(exec)) {
    if(!!~commands.indexOf(command)){
      logger.error(bin + '(1) does not exist');
      return;
    } else {
      logger.error('No such file : ', command);
      return;
    }
  }

  // spawn
  args.unshift(exec);

  // proxy subcommands through gnode(1)
  var gnode = require.resolve('gnode');
  var bin = join(dirname(gnode), 'bin', 'gnode');
  args.unshift(bin);

  var proc = spawn('node', args, { stdio: 'inherit', customFds: [0, 1, 2] });
  proc.on('close', process.exit.bind(process));

  return;
}

/**
 * Actions
 */

if (command) build(program.args.filter(globs));
else if (!process.stdin.isTTY) input();
else program.help();

/**
 * Accept standard input
 *
 * @api private
 */

function input() {
  stdin(function(src) {
    var duo = create(root).src(src, program.type);

    duo.run(function(err, str) {
      if (err) throw error(err);
      logger.end();
      stdout.write(str);
      process.exit(0);
    });
  });
}

/**
 * Build the entries
 *
 * @param {Array} entries
 * @api private
 */

function build(entries) {
  outdir && entries.pop();
  var len = entries.length;

  return !len
    ? program.help()
    : 1 == len && !outdir
    ? print(entries[0])
    : write(entries);
}

/**
 * Print to stdout
 *
 * @param {String} entry
 * @api private
 */

function print(entry) {
  create(entry).run(function(err, src) {
    if (err) return error(err);
    logger.end();
    stdout.write(src);

    // watch or exit
    program.watch
      ? watch(print)
      : process.exit(0);
  });
}

/**
 * Write the entries
 *
 * @param {Array} entries
 * @api private
 */

function write(entries) {
  entries = 'string' == typeof entries ? [entries] : entries;

  var batch = new Batch;
  var push = batch.push.bind(batch);

  var duos = entries
    .map(multiple)
    .map(push);

  batch.end(function(err) {
    if (err) return error(err);
    logger.end();

    // watch or exit
    program.watch
      ? watch(write)
      : process.exit(0);
  });

  // write multiple entries to
  // the directory `out`
  function multiple(entry) {
    return function(done) {
      create(entry).write(done);
    }
  }
}

/**
 * Create a duo instance
 *
 * @param {entry} entry
 * @return {Duo}
 * @api private
 */

function create(entry) {
  var duo = Duo(root)
    .entry(resolve(program.root || cwd, entry))
    .development(!! program.development)
    .copy(program.copy);

  // global
  program.global && duo.global(program.global);

  // verbose
  if (program.verbose) {
    duo.on('resolving', log('finding'));
    duo.on('resolve', log('found'));
    duo.on('installing', log('installing'));
  }

  // output dir
  outdir && duo.assets(outdir);
  program.out && duo.assets(program.out);

  // use plugins
  plugins.forEach(function (plugin) {
    duo.use(plugin);
  });

  // events
  if (!quiet) {
    duo.on('install', log('installed'));
    duo.on('running', log('building'));
    duo.on('run', log('built'));
  }

  return duo;
}

/**
 * Watch
 *
 * @param {Function} action
 * @api private
 */

function watch(action) {
  if (watching) return;
  watching = true;
  Watch(root).watch(action);
}

/**
 * Log an event
 *
 * @param {String} event
 * @return {Function}
 */

function log (event) {
  return function(pkg) {
    pkg = pkg.slug ? pkg.slug() : pkg;
    pkg = 'source.' + (program.type || 'js') == pkg ? 'from stdin' : pkg;
    logger[event](pkg);
  }
}

/**
 * Error
 */

function error(err) {
  err = 'string' == typeof err ? new Error(err) : err;
  logger.error(err.stack);
  logger.end();
}

/**
 * Find the root
 *
 * @param {String} root
 * @param {String}
 */

function findroot(root) {
  if (root) return resolve(cwd, root);
  var path = cwd;

  while (!exists(join(path, 'component.json')) && '/' != path) {
    path = dirname(path);
  }

  return '/' == path
    ? cwd
    : path;
}

/**
 * Check if `entries` contains
 * an asset path
 *
 * @param {Array} entries
 * @return {String|Boolean}
 * @api private
 */

function assets(entries) {
  if (!entries.length) return false;
  var len = entries.length;
  var last = entries[len - 1];
  return !isFile(last) && last;
}

/**
 * Filter out unexpanded globs
 *
 * @param {String} entry
 * @return {Boolean}
 * @api private
 */

function globs(path) {
  return !/\*/.test(path);
}

/**
 * Simple hueristic to check
 * if `path` is a file
 *
 * @param {String} path
 * @return {Boolean}
 * @api private
 */

function isFile(path) {
  return path && exists(path) && stats(path).isFile();
}

/**
 * Retrieve an array of plugins from --use
 *
 * @param {String} plugins
 * @return {Array}
 * @api private
 */

function usePlugins(use) {
  if (!use) return [];

  return use.split(",").map(function (plugin) {
    try {
      var local = resolve(root, plugin);
      var npm = resolve(root, "node_modules", plugin);

      var mod = require(exists(local) ? local : npm);
      logger.using(plugin);
      return mod();
    } catch (e) {
      error(e);
    }
  });
}
